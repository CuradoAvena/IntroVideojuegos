using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class PopupController : MonoBehaviour
{
    [SerializeField] private TMP_Dropdown dropdown; // Referencia al Dropdown
    [SerializeField] private GameObject popupWindow; // Referencia al panel de la ventana pop-up
    [SerializeField] private TextMeshProUGUI popupText; // Texto dentro del pop-up

    // Estructura para cada opción del Dropdown
    [System.Serializable]
    public struct DropdownOption
    {
        public string popupMessage; // Texto que se muestra en el pop-up
        public string link; // Enlace asociado (vacío para la primera opción si no tiene enlace)
    }

    [SerializeField] private DropdownOption[] options = new DropdownOption[2]; // Dos opciones

    void Start()
    {
        // Asegúrate de que el pop-up esté desactivado al inicio
        if (popupWindow != null)
            popupWindow.SetActive(false);

        // Añade un listener al Dropdown para detectar cambios
        if (dropdown != null)
            dropdown.onValueChanged.AddListener(OnDropdownValueChanged);

        // Habilita los hipervínculos en el texto del pop-up
        if (popupText != null)
        {
            popupText.raycastTarget = true; // Necesario para detectar clics en el texto
            popupText.GetComponent<TMP_Text>().OnTextLinkClicked += OnTextLinkClicked; // Listener para clics en enlaces
        }
    }

    void OnDropdownValueChanged(int index)
    {
        if (popupWindow != null && index < options.Length)
        {
            popupWindow.SetActive(true);

            // Configura el texto del pop-up
            if (popupText != null)
            {
                // Si es la segunda opción y tiene enlace, formatea el texto con un hipervínculo
                if (index == 1 && !string.IsNullOrEmpty(options[index].link))
                {
                    popupText.text = $"{options[index].popupMessage} <link><u><color=blue>Click aquí para visitar</color></u></link>";
                }
                else
                {
                    popupText.text = options[index].popupMessage; // Texto sin enlace para la primera opción
                }
            }
        }
    }

    void OnTextLinkClicked(string linkID, int linkIndex)
    {
        // Abre el enlace de la segunda opción si se hace clic en el texto del hipervínculo
        if (dropdown.value == 1 && !string.IsNullOrEmpty(options[1].link))
        {
            Application.OpenURL(options[1].link);
        }
    }

    public void ClosePopup()
    {
        if (popupWindow != null)
            popupWindow.SetActive(false);
    }

    void OnDestroy()
    {
        // Limpia los listeners para evitar memory leaks
        if (dropdown != null)
            dropdown.onValueChanged.RemoveListener(OnDropdownValueChanged);
        if (popupText != null)
        {
            popupText.GetComponent<TMP_Text>().OnTextLinkClicked -= OnTextLinkClicked;
        }
    }
}