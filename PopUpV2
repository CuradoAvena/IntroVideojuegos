using UnityEngine;
using UnityEngine.EventSystems;
using TMPro;

public class PopUpWindows : MonoBehaviour, IPointerClickHandler
{
    [SerializeField] private TMP_Dropdown dropdown; // Referencia al Dropdown
    [SerializeField] private GameObject popupWindow; // Referencia al panel del pop-up
    [SerializeField] private TextMeshProUGUI popupText; // Texto dentro del pop-up

    private const string versionText = "Información de la versión del juego."; // Texto para "Versión"
    private const string companyText = "Visita nuestra empresa:"; // Texto base para "Empresa"
    private const string companyLink = "https://www.youtube.com"; // Enlace para "Empresa"
    private int selectedIndex; // Índice de la opción seleccionada

    private void Start()
    {
        // Verifica referencias
        if (popupWindow == null) Debug.LogError("Popup Window no está asignado en el Inspector.", this);
        if (popupText == null) Debug.LogError("Popup Text no está asignado en el Inspector.", this);
        if (dropdown == null) Debug.LogError("Dropdown no está asignado en el Inspector.", this);

        // Verifica las opciones del Dropdown
        if (dropdown != null && dropdown.options.Count != 3)
        {
            Debug.LogError($"El Dropdown debe tener exactamente 3 opciones (Seleccionar, Versión, Empresa), pero tiene {dropdown.options.Count}.", this);
        }

        // Desactiva el pop-up al inicio
        if (popupWindow != null)
            popupWindow.SetActive(false);

        // Configura el listener del Dropdown
        if (dropdown != null)
            dropdown.onValueChanged.AddListener(OnDropdownValueChanged);

        // Configura TextMeshProUGUI para hipervínculos
        if (popupText != null)
        {
            popupText.raycastTarget = true;
            popupText.enableWordWrapping = true;
            popupText.richText = true;
        }
    }

    private void OnDropdownValueChanged(int index)
    {
        selectedIndex = index;

        // Si es "Seleccionar" (index == 0), no hagas nada
        if (index == 0)
        {
            if (popupWindow != null)
                popupWindow.SetActive(false);
            Debug.Log("Opción 'Seleccionar': No se muestra pop-up.", this);
            return;
        }

        // Verifica si el índice es válido
        if (index != 1 && index != 2)
        {
            Debug.LogError($"Índice {index} no válido. Solo se permiten índices 1 (Versión) y 2 (Empresa).", this);
            return;
        }

        if (popupWindow == null)
        {
            Debug.LogError("Popup Window es null. Asegúrate de asignarlo en el Inspector.", this);
            return;
        }

        if (popupText == null)
        {
            Debug.LogError("Popup Text es null. Asegúrate de asignarlo en el Inspector.", this);
            return;
        }

        popupWindow.SetActive(true);

        // Configura el texto según la opción seleccionada
        if (index == 2) // Empresa
        {
            popupText.text = $"{companyText} <link=\"webLink\"><u><color=#0066CC>Click aquí</color></u></link>";
            Debug.Log($"Mostrando texto para Empresa: {popupText.text}", this);
        }
        else // Versión (index == 1)
        {
            popupText.text = versionText;
            Debug.Log($"Mostrando texto para Versión: {popupText.text}", this);
        }
    }

    public void OnPointerClick(PointerEventData eventData)
    {
        if (popupText == null || selectedIndex != 2)
        {
            Debug.LogWarning("No se puede abrir enlace: PopupText es null o no es Empresa.", this);
            return;
        }

        int linkIndex = TMP_TextUtilities.FindIntersectingLink(popupText, eventData.position, null);
        if (linkIndex != -1)
        {
            TMP_LinkInfo linkInfo = popupText.textInfo.linkInfo[linkIndex];
            if (linkInfo.GetLinkID() == "webLink")
            {
                Application.OpenURL(companyLink);
                Debug.Log($"Abriendo enlace: {companyLink}", this);
            }
        }
        else
        {
            Debug.Log("No se detectó clic en un enlace.", this);
        }
    }

    public void ClosePopup()
    {
        if (popupWindow != null)
            popupWindow.SetActive(false);
        else
        {
            Debug.LogError("Popup Window es null. No se puede cerrar el pop-up.", this);
        }
    }

    private void OnDestroy()
    {
        if (dropdown != null)
            dropdown.onValueChanged.RemoveListener(OnDropdownValueChanged);
    }
}