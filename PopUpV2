using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.IO; // Para leer el archivo .txt

public class PopupController : MonoBehaviour
{
    [SerializeField] private TMP_Dropdown dropdown; // Referencia al Dropdown
    [SerializeField] private GameObject popupWindow; // Referencia al panel de la ventana pop-up
    [SerializeField] private TextMeshProUGUI popupText; // Texto dentro del pop-up
    [SerializeField] private Button linkButton; // Botón para abrir el enlace
    [SerializeField] private string linksFilePath = "Assets/Links/links.txt"; // Ruta del archivo .txt con los enlaces

    private string[] links; // Almacena los enlaces leídos del archivo .txt

    void Start()
    {
        // Asegúrate de que el pop-up esté desactivado al inicio
        if (popupWindow != null)
            popupWindow.SetActive(false);

        // Carga los enlaces desde el archivo .txt
        LoadLinksFromFile();

        // Añade un listener al Dropdown para detectar cambios
        if (dropdown != null)
            dropdown.onValueChanged.AddListener(OnDropdownValueChanged);

        // Configura el botón para abrir el enlace
        if (linkButton != null)
            linkButton.onClick.AddListener(OpenLink);
    }

    void LoadLinksFromFile()
    {
        try
        {
            // Lee todas las líneas del archivo .txt
            if (File.Exists(linksFilePath))
            {
                links = File.ReadAllLines(linksFilePath);
            }
            else
            {
                Debug.LogError("El archivo de enlaces no se encuentra en: " + linksFilePath);
                links = new string[] { "", "" }; // Enlaces por defecto vacíos
            }
        }
        catch (System.Exception e)
        {
            Debug.LogError("Error al leer el archivo de enlaces: " + e.Message);
            links = new string[] { "", "" }; // Enlaces por defecto vacíos
        }
    }

    void OnDropdownValueChanged(int index)
    {
        if (popupWindow != null)
        {
            popupWindow.SetActive(true);

            // Configura el texto del pop-up según la opción seleccionada
            if (popupText != null)
            {
                string selectedOption = dropdown.options[index].text;
                popupText.text = index == 0 ? "Texto para Opción 1" : "Texto para Opción 2";
            }

            // Actualiza el enlace asociado al botón según la opción seleccionada
            if (linkButton != null && links != null && index < links.Length)
            {
                linkButton.gameObject.SetActive(!string.IsNullOrEmpty(links[index]));
            }
        }
    }

    void OpenLink()
    {
        int selectedIndex = dropdown.value;
        if (links != null && selectedIndex < links.Length && !string.IsNullOrEmpty(links[selectedIndex]))
        {
            Application.OpenURL(links[selectedIndex]);
        }
        else
        {
            Debug.LogWarning("No hay enlace válido para la opción seleccionada.");
        }
    }

    public void ClosePopup()
    {
        if (popupWindow != null)
            popupWindow.SetActive(false);
    }

    void OnDestroy()
    {
        // Limpia los listeners para evitar memory leaks
        if (dropdown != null)
            dropdown.onValueChanged.RemoveListener(OnDropdownValueChanged);
        if (linkButton != null)
            linkButton.onClick.RemoveListener(OpenLink);
    }
}