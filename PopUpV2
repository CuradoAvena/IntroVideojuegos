using UnityEngine;
using UnityEngine.EventSystems;
using TMPro;

public class PopUpWindows : MonoBehaviour, IPointerClickHandler
{
    [SerializeField] private TMP_Dropdown dropdown; // Referencia al Dropdown
    [SerializeField] private GameObject versionPopup; // Panel para el pop-up de "Versión"
    [SerializeField] private TextMeshProUGUI versionText; // Texto dentro del pop-up de "Versión"
    [SerializeField] private GameObject companyPopupText; // GameObject con TextMeshProUGUI para "Empresa" (hipervínculo)

    private const string versionMessage = "Información de la versión del juego."; // Texto para "Versión"
    private const string companyMessage = "<link=\"webLink\"><u><color=#0066CC>Visita nuestra empresa</color></u></link>"; // Texto-hipervínculo para "Empresa"
    private const string companyLink = "https://www.youtube.com"; // URL para "Empresa"
    private int selectedIndex; // Índice de la opción seleccionada

    private void Start()
    {
        // Verifica referencias
        if (dropdown == null) Debug.LogError("Dropdown no está asignado en el Inspector.", this);
        if (versionPopup == null) Debug.LogError("Version Popup no está asignado en el Inspector.", this);
        if (versionText == null) Debug.LogError("Version Text no está asignado en el Inspector.", this);
        if (companyPopupText == null) Debug.LogError("Company Popup Text no está asignado en el Inspector.", this);

        // Verifica las opciones del Dropdown
        if (dropdown != null && dropdown.options.Count != 3)
        {
            Debug.LogError($"El Dropdown debe tener exactamente 3 opciones (Seleccionar, Versión, Empresa), pero tiene {dropdown.options.Count}.", this);
        }

        // Desactiva ambos pop-ups al inicio
        if (versionPopup != null)
            versionPopup.SetActive(false);
        if (companyPopupText != null)
            companyPopupText.SetActive(false);

        // Configura el listener del Dropdown
        if (dropdown != null)
            dropdown.onValueChanged.AddListener(OnDropdownValueChanged);

        // Configura TextMeshProUGUI para "Versión"
        if (versionText != null)
        {
            versionText.raycastTarget = false; // No necesita clics
            versionText.enableWordWrapping = true;
            versionText.richText = true;
            versionText.text = versionMessage;
            versionText.color = Color.white; // Asegura visibilidad
            versionText.fontSize = 24;
        }

        // Configura TextMeshProUGUI para "Empresa"
        if (companyPopupText != null)
        {
            TextMeshProUGUI companyText = companyPopupText.GetComponent<TextMeshProUGUI>();
            if (companyText != null)
            {
                companyText.raycastTarget = true; // Necesario para clics
                companyText.enableWordWrapping = true;
                companyText.richText = true;
                companyText.text = companyMessage;
                companyText.color = Color.white; // Asegura visibilidad
                companyText.fontSize = 24;
            }
            else
            {
                Debug.LogError("Company Popup Text no tiene un componente TextMeshProUGUI.", this);
            }
        }
    }

    private void OnDropdownValueChanged(int index)
    {
        selectedIndex = index;

        // Desactiva ambos pop-ups antes de procesar
        if (versionPopup != null)
            versionPopup.SetActive(false);
        if (companyPopupText != null)
            companyPopupText.SetActive(false);

        // Si es "Seleccionar" (index == 0), no hagas nada
        if (index == 0)
        {
            Debug.Log("Opción 'Seleccionar': No se muestra pop-up.", this);
            return;
        }

        // Verifica si el índice es válido
        if (index != 1 && index != 2)
        {
            Debug.LogError($"Índice {index} no válido. Solo se permiten índices 1 (Versión) y 2 (Empresa).", this);
            return;
        }

        // Activa el pop-up correspondiente
        if (index == 1) // Versión
        {
            if (versionPopup != null)
            {
                versionPopup.SetActive(true);
                if (versionText != null)
                {
                    versionText.text = versionMessage;
                    Debug.Log($"Mostrando pop-up para Versión: {versionText.text}", this);
                }
                else
                {
                    Debug.LogError("Version Text es null.", this);
                }
            }
            else
            {
                Debug.LogError("Version Popup es null.", this);
            }
        }
        else if (index == 2) // Empresa
        {
            if (companyPopupText != null)
            {
                companyPopupText.SetActive(true);
                TextMeshProUGUI companyText = companyPopupText.GetComponent<TextMeshProUGUI>();
                if (companyText != null)
                {
                    companyText.text = companyMessage;
                    Debug.Log($"Mostrando pop-up para Empresa: {companyText.text}", this);
                }
                else
                {
                    Debug.LogError("Company Popup Text no tiene un componente TextMeshProUGUI.", this);
                }
            }
            else
            {
                Debug.LogError("Company Popup Text es null.", this);
            }
        }
    }

    public void OnPointerClick(PointerEventData eventData)
    {
        if (selectedIndex != 2 || companyPopupText == null)
        {
            Debug.LogWarning("No se puede abrir enlace: No es Empresa o Company Popup Text es null.", this);
            return;
        }

        TextMeshProUGUI companyText = companyPopupText.GetComponent<TextMeshProUGUI>();
        if (companyText == null)
        {
            Debug.LogWarning("Company Popup Text no tiene un componente TextMeshProUGUI.", this);
            return;
        }

        int linkIndex = TMP_TextUtilities.FindIntersectingLink(companyText, eventData.position, null);
        if (linkIndex != -1)
        {
            TMP_LinkInfo linkInfo = companyText.textInfo.linkInfo[linkIndex];
            if (linkInfo.GetLinkID() == "webLink")
            {
                Application.OpenURL(companyLink);
                Debug.Log($"Abriendo enlace: {companyLink}", this);
            }
        }
        else
        {
            Debug.Log("No se detectó clic en un enlace.", this);
        }
    }

    public void ClosePopup()
    {
        if (versionPopup != null)
            versionPopup.SetActive(false);
        if (companyPopupText != null)
            companyPopupText.SetActive(false);
        Debug.Log("Pop-ups cerrados.", this);
    }

    private void OnDestroy()
    {
        if (dropdown != null)
            dropdown.onValueChanged.RemoveListener(OnDropdownValueChanged);
    }
}